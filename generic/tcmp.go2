package tcmp

import (
    "fmt"
)

type Type interface {
    int, int8, int16, int32, int64, string
}

type Compareable interface {
    //
}

type TypeK interface {
    Type,
    Compareable
}

type Slice struct {}

func (s *Slice) Equal[T Type](t1, t2 []T) bool {
    if len(t1) != len(t2) {
        return false
    }
    for i := range t1 {
        if t1[i] != t2[i] {
            return false
        }
    }
    return true
}

func (s *Slice) IsNil[T Type](t []T) bool {
    if t == nil {
        return true
    }
    return false
}

type Map struct{}

func (m *Map) Equal[TK TypeK, T Type](t1, t2 map[TK]T) bool {
    if len(t1) != len(t2) {
        return false
    }
    for k, t1v := range t1 {
        if t2v, ok := t2[k]; !ok || t1v != t2v {
            return false
        }
    }
    return true
}

func (s *Map) IsNil[TK TypeK, T Type](t map[TK]T) bool {
    if t == nil {
        return true
    }
    return false
}

